<?php

/**
 * @file
 * Custom functions and hooks for Etype Services
 *
 */

/**
 * Implements hook_menu().
 */
function etype_menu() {

  $items = array();

  $items['etype-classified-import'] = array(
    'title' => t('Import Classified Ads'),
    'page callback' => 'etype_classified_ad_importer',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access administration pages')
  );

  return $items;

}

/* run job at 3:00 am */
function etype_cronapi($op, $job = NULL) {

  $items['etype_cron'] = array(
    'description' => 'Import Classified Ads',
    'rule' => '0 3 * * * *',
    'callback' => 'etype_classified_ad_importer',
    'arguments' => array('all'),
  );

  return $items;
}

/**
 * map xml classified categories to Drupal taxonomy items
 * @param FeedsSource $source
 * @param $entity
 * @param $item
 * @param $entity_id
 */
function etype_feeds_presave(FeedsSource $source, $entity, $item, $entity_id) {

  /* ad categories */
  $categories = array(
    "4010" => "210",
    "4020" => "211",
    "1660" => "212",
    "100" => "213",
    "4030" => "214",
    "0410" => "215",
    "0710" => "216",
    "0420" => "217",
    "0530" => "218",
    "0415" => "219",
    "0505" => "220",
    "0535" => "221",
    "0340" => "222",
    "0730" => "223",
    "0735" => "276",
    "0815" => "224",
    "1670" => "225",
    "0230" => "226",
    "0545" => "227",
    "1560" => "362",
    "1710" => "229",
    "0740" => "230",
    "0830" => "231",
    "4040" => "232",
    "0725" => "233",
    "0820" => "234",
    "0215" => "235",
    "4050" => "236",
    "4060" => "237",
    "3040" => "238",
    "1650" => "239",
    "1640" => "240",
    "1590" => "362",
    "1740" => "242",
    "4070" => "243",
    "4080" => "244",
    "1580" => "362",
    "1730" => "246",
    "0325" => "247",
    "4090" => "248",
    "1630" => "249",
    "0300" => "250",
    "4100" => "251",
    "0425" => "252",
    "0825" => "253",
    "1620" => "254",
    "0430" => "255",
    "0310" => "256",
    "0315" => '300',
    "0910" => "258",
    "0400" => "259",
    "0905" => "260",
    "1005" => "261",
    "1010" => "262",
    "4110" => "362",
    "4120" => "264",
    "1510" => "362",
    "1600" => "266",
    "0615" => "267",
    "0435" => "268",
    "0305" => "270",
    "1680" => "272",
    "1540" => "362",
    "4000" => "362",
    "0210" => "275",
    "0705" => "276",
    "0805" => "277",
    "0225" => "281",
    "1610" => "282",
    "0120" => "284",
    "0235" => "285",
    "0900" => "286",
    "0810" => "288",
    "0205" => "289",
    "0440" => "290",
    "1535" => "362",
    "1500" => "362",
    "3000" => "362",
    "4130" => "294",
    "4140" => "303",
    "4150" => "311",
    "4180" => "326",
    "4160" => "327",
    "4190" => "339",
    "0515" => "340",
    "4200" => "341",
    "0515" => "340",
    "0115" => "342",
    "0240" => "343",
    "0500" => "344",
    "0510" => "345",
    "0715" => "346",
    "0520" => "347",
    "0555" => "348",
    "0450" => "349",
    "0620" => "350",
    "0755" => "351",
    "0750" => "352",
    "1570" => "362",
    "1720" => "354",
    "0345" => "356",
    "01405" => "357",
    "0405" => "358",
    "0915" => "299",
    "0125" => "269"
  );


  if (! isset($item['xpathparser:5'])) {
    drupal_set_message(t("No category id for item"), 'error');
    $entity->feeds_item->skip = TRUE;
  } else {
    $xml_cat = $item['xpathparser:5'];

  	$ad_cat = 0;

  	foreach ($categories as $k => $v) {
      if ($xml_cat == $k) {
     	$ad_cat = $v;
        continue;
      }
    }

    if ($ad_cat > 0) {
      $entity->classified_category['und'][0]['tid'] = $ad_cat;
    } else {
  	  drupal_set_message(t("$xml_cat not matched"), 'error');
      $entity->feeds_item->skip = TRUE;
    }
  }
  
}

function etype_entity_create($item = array(), $values = array(), $entity_type =
'node')
{

  // entity_create replaces the procedural steps in the first example of
  // creating a new object $node and setting its 'type' and uid property

  $entity = entity_create($entity_type, $values);
  // The entity is now created, but we have not yet simplified use of it.
  // Now create an entity_metadata_wrapper around the new node entity
  // to make getting and setting values easier
  $ewrapper = entity_metadata_wrapper($entity_type, $entity);
  // Using the wrapper, we do not have to worry about telling Drupal
  // what language we are using. The Entity API handles that for us.
  if (count($item) > 0)
  {
    foreach ($item as $k => $v)
    {
      switch ($k)
      {
        case 'title':
          $title = html_entity_decode($v); // for some reason & are being inserted as '&amp;'
          $ewrapper->$k->set($title);
          break;

        default:
          $ewrapper->$k->set($v);

      }
    }
  }
  $ewrapper->save(TRUE);
}

/* feeds cron job */
function etype_classified_ad_importer() {
  $xml = file_get_contents('http://www.etypeclassifieds.com/toccoaxml/CNI_CTR.xml');
  if ($xml !== FALSE) {
    $ad_obj = simplexml_load_string($xml, 'SimpleXMLElement', LIBXML_NOCDATA);
    if (count($ad_obj) > 0) {
      foreach($ad_obj as $ad) {
        echo $ad->ItemId . '<br />';
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'clasified')
          ->fieldCondition('field_guid', 'value', $ad->ItemId, '=');
        $result = $query->execute();
        print_r($result);
        echo '<br /><br />';
      }
    }
  }
}